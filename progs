/////////////////////////////////////--------HILL Cipher-------///////////////////////////////////////////////////

#include <iostream>
#include <bits/stdc++.h>

using namespace std;

float key[2][2], keyinverse[2][2], proccess_msg[2], encrypt[2], decrypt[2];

string encrypt_msg = "", decrypt_msg = "", msg;

void inverse()
{
    keyinverse[0][1] = -1 * key[0][1];
    keyinverse[1][0] = -1 * key[1][0];

    keyinverse[0][0] = key[1][1];
    keyinverse[1][1] = key[0][0];

    int temp = (key[0][0] * key[1][1]) - (key[0][1] * key[1][0]);

    for (int i = 0; i < 2; i++)
        {for (int j = 0; j < 2; j++)
         {  
             keyinverse[i][j] /= temp;
             cout<<keyinverse[i][j]<<" ";
         }
            cout<<endl;
        }
}

void encryptfunc()
{
    for (int i = 0; i < 2; i++)
    {
        encrypt[i] = 0;
    }

    for (int i = 0; i < 2; i++)
        for (int j = 0; j < 2; j++)
        {
            encrypt[i] += key[i][j] * proccess_msg[j];
        }

    for (int i = 0; i < 2; i++)
    {
        char ch = (char)(fmod(encrypt[i], 26) + 97);
        encrypt_msg += ch;
    }
}

void decryptfunc()
{
    for (int i = 0; i < 2; i++)
    {
        decrypt[i] = 0;
    }

    for (int i = 0; i < 2; i++)
        for (int j = 0; j < 2; j++)
        {
            decrypt[i] += keyinverse[i][j] * encrypt[j];
        }

    for (int i = 0; i < 2; i++)
    {
        char ch = (char)(fmod(decrypt[i], 26) + 97);
        decrypt_msg += ch;
    }
}

int main()
{
    cout << "Enter the Msg : ";
    cin >> msg;

    cout << "\nEnter the 2 x 2 matrix : \n";

    for (int i = 0; i < 2; i++)
        for (int j = 0; j < 2; j++)
            cin >> key[i][j];

    inverse();

    for (int i = 0; i < msg.length(); i++)
    {
        proccess_msg[i % 2] = msg[i]-97;
        if (i % 2)
        {
            encryptfunc();
            decryptfunc();
        }
    }

    cout << "\n\nEncrypt Msg : " << encrypt_msg << endl;

    cout << "\nDecrypt Msg : " << decrypt_msg << endl;
    return 0;
}

/////////////////////////////////////--------play fiar-------///////////////////////////////////////////////////

#include<bits/stdc++.h>
#include<string.h>
#define SIZE 5
using namespace std;
void generateKeyTable(string key, char keyTable[SIZE][SIZE]) {
    int k = 0;
    char vis[26] = {0};
    for (int i = 0; i < key.length(); i++) {
        if (vis[key[i] - 'A'] == 0 && key[i] != 'J') {
            keyTable[k / SIZE][k % SIZE] = key[i];
            vis[key[i] - 'A'] = 1;
            k++;
        }
    }
    char ch = 'A';
    for (int i = k; i < SIZE * SIZE; i++) {
        while (vis[ch - 'A'] == 1 || ch == 'J')
            ch++;
        keyTable[i / SIZE][i % SIZE] = ch;
        vis[ch - 'A'] = 1;
        ch++;
    }
}
void printKeyTable(char keyTable[SIZE][SIZE]) {
    cout << "Key Table:" << endl;
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if(keyTable[i][j]=='I')
            cout<<"J/";
            cout << keyTable[i][j] << " ";
            
        }
        cout << endl;
    }
}
void findPosition(char keyTable[SIZE][SIZE], char ch, int& row, int& col) {
    if (ch == 'J') ch = 'I';
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (keyTable[i][j] == ch) {
                row = i;
                col = j;
                return;
            }
        }
    }
}

string encrypt(char keyTable[SIZE][SIZE], string& plaintext) {
    int len = plaintext.length();
    string ciphertext;
    if (plaintext.length() % 2 != 0) {
        plaintext += 'X';
    }
    for (int i = 0; i < len; i += 2) {
        char ch1 = plaintext[i];
        char ch2 = plaintext[i + 1];

        if (ch1 == ch2) {
            ch2 = 'X'; 
            i--;
        }
        int row1, col1, row2, col2;
        findPosition(keyTable, ch1, row1, col1);
        findPosition(keyTable, ch2, row2, col2);
        if (row1 == row2) {
            ciphertext += keyTable[row1][(col1 + 1) % SIZE];
            ciphertext += keyTable[row2][(col2 + 1) % SIZE];
        }
        else if (col1 == col2) {
            ciphertext += keyTable[(row1 + 1) % SIZE][col1];
            ciphertext += keyTable[(row2 + 1) % SIZE][col2];
        }
        else {
            ciphertext += keyTable[row1][col2];
            ciphertext += keyTable[row2][col1];
        }
    }
    cout << "Encrypted Text: " << ciphertext << endl;
    return ciphertext;
}
string decrypt(char keyTable[SIZE][SIZE], string& ciphertext) {
    int len = ciphertext.length();
    string plaintext;

    for (int i = 0; i < len; i += 2) {
        char ch1 = ciphertext[i];
        char ch2 = ciphertext[i + 1];

        int row1, col1, row2, col2;
        findPosition(keyTable, ch1, row1, col1);
        findPosition(keyTable, ch2, row2, col2);

        if (row1 == row2) {
            plaintext += keyTable[row1][(col1 + SIZE - 1) % SIZE];
            plaintext += keyTable[row2][(col2 + SIZE - 1) % SIZE];
        }
        else if (col1 == col2) {
            plaintext += keyTable[(row1 + SIZE - 1) % SIZE][col1];
            plaintext += keyTable[(row2 + SIZE - 1) % SIZE][col2];
        }
        else {
            plaintext += keyTable[row1][col2];
            plaintext += keyTable[row2][col1];
        }
    }

   plaintext.erase(remove(plaintext.begin(), plaintext.end(), 'X'), plaintext.end());


    cout << "Decrypted Text: " << plaintext << endl;
    return plaintext;
}
int main() {
    string key, plaintext;
    cout << "Enter the key: ";
    cin >> key;
    for (int i = 0; i < key.length(); i++) {
        char c = key[i];
        if (!isalpha(c)||!isupper(c)) {
            cout << "Invalid key!" << endl;
            return 1;
        }
    }
    char keyTable[SIZE][SIZE];
    generateKeyTable(key, keyTable);
    printKeyTable(keyTable);
    cout << "Enter the plaintext:";
    cin >> plaintext;
    for (int i = 0; i < plaintext.length(); i++) {
        plaintext[i] = toupper(plaintext[i]);
    }
    for (int i = 0; i < plaintext.length(); i++) {
        char c = plaintext[i];
        if (!isalpha(c)) {
            cout << "Invalid plaintext!" << endl;
            return 1;
        }
    }
    string ciphertext=encrypt(keyTable, plaintext);
    decrypt(keyTable, ciphertext);
    return 0;
}
/////////////////////////// ---------------------ceaser------------------////////////////////////

#include<iostream>
#include<string>

using namespace std;

string encrypt(string msg, int k)
{
    string cipher = "";

    for(int i = 0; i < msg.length(); i++)
    {
        if (isupper(msg[i]))
            cipher += (char)((msg[i] - 'A' + k) % 26 + 'A');
        else if (islower(msg[i]))
            cipher += (char)((msg[i] - 'a' + k) % 26 + 'a');
        else
            cipher += msg[i];
    }
    return cipher;
}

string decrypt(string cipher, int k)
{
    string msg = "";

    for(int i = 0; i < cipher.length(); i++)
    {
        if (isupper(cipher[i]))
            msg += (char)((cipher[i] - 'A' - k + 26) % 26 + 'A');
        else if (islower(cipher[i]))
            msg += (char)((cipher[i] - 'a' - k + 26) % 26 + 'a');
        else
            msg += cipher[i];
    }
    return msg;
}

int main()
{
   string msg;
   int dis;
   
   cout << "Enter the msg to encrypt:";
   getline(cin, msg); // Read entire line
   
   cout << "\nEnter the distance :";
   cin >> dis;
   
   string cipher = encrypt(msg, dis);
   
   cout << "\nEncrypted msg : " << cipher;
   
   msg = decrypt(cipher, dis);
   
   cout << "\nDecrypted msg : " << msg;
   
   return 0;
}

//////////////////////////////////-----------------rsa--------------------///////////////////////////////////

#include <bits/stdc++.h>
using namespace std;

// Function to calculate gcd of two numbers
int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

// Function to generate public and private key
void generate_key(int p, int q, int &n, int &e, int &d) {
    n = p * q;
    int phi = (p - 1) * (q - 1);
    for (e = 2; e < phi; e++) {
        if (gcd(e, phi) == 1)
            break;
    }
    for (d = 2; d < phi; d++) {
        if ((d * e) % phi == 1)
            break;
    }
}

// Function to encrypt message
int encrypt(int message, int e, int n) {
    int encrypted_message = 1;
    for (int i = 0; i < e; i++) {
        encrypted_message = (encrypted_message * message) % n;
    }
    return encrypted_message;
}

// Function to decrypt message
int decrypt(int encrypted_message, int d, int n) {
    int decrypted_message = 1;
    for (int i = 0; i < d; i++) {
        decrypted_message = (decrypted_message * encrypted_message) % n;
    }
    return decrypted_message;
}

int main() {
    int p = 61, q = 53; // Two prime numbers
    int n, e, d; // Public and private key components
    generate_key(p, q, n, e, d);

    int message = 65; // Message to be encrypted
    int encrypted_message = encrypt(message, e, n);
    std::cout << "Encrypted Message: " << encrypted_message << std::endl;

    int decrypted_message = decrypt(encrypted_message, d, n);
    std::cout << "Decrypted Message: " << decrypted_message << std::endl;

    return 0;
}\
